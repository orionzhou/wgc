launchDir = "$proj/wgc/nf"
workDir = "$NXF_CACHE/work/wgc"

includeConfig "$NXF_HOME/configs/nextflow.config"
process.conda = "$NXF_CONDA_CACHEDIR/wgc"

params {
  name = 'wgc'
  s = 'Laburnicola'
  comps = "01.${s}.tsv"
  outdir = "$proj/s3/zhoup-wgc/$s"
  npieces = 20
  max_indel_size = 5000
}

cleanup = false
process {
  //withName:version { executor = 'local' }
  withName:prep_qry {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 15.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h + 1.h * task.attempt, 'time' ) }
  }
  withName:aln {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 25.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 1.h * task.attempt, 'time' ) }
  }
  withName:merge {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 25.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h + 2.h * task.attempt, 'time' ) }
  }
  withName:i_blastp {
    executor = 'local'
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 15.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h + 1.h * task.attempt, 'time' ) }
  }
  withName:blastp {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 25.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 5.h * task.attempt, 'time' ) }
  }
  withName:jcvi {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 30.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h + 1.h * task.attempt, 'time' ) }
  }
  withName:wgdi {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 30.GB + 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 50.h + 1.h * task.attempt, 'time' ) }
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
